# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage

import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
import pandas as pd
from concurrent.futures import ThreadPoolExecutor

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\odpa0\OneDrive\바탕 화면\오픈소스 기초\grouptest\build\assets\frame1")

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def fetch_melon_top_100():
    # 멜론 TOP 100 차트 페이지 URL
    url = 'https://www.melon.com/chart/index.htm'

    # Selenium 웹 드라이버 설정
    options = webdriver.ChromeOptions()
    options.add_argument('--headless')  # 헤드리스 모드(브라우저 창을 열지 않음)
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')

    # 웹 드라이버 실행
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
    driver.get(url)

    # 페이지 로드 대기
    time.sleep(3)

    # 곡 ID, 제목, 아티스트 추출
    song_ids = []
    song_titles = []
    song_artists = []

    for song_tag in driver.find_elements(By.CSS_SELECTOR, 'tr.lst50, tr.lst100'):
        song_id = song_tag.get_attribute('data-song-no')
        if song_id:
            title_tag = song_tag.find_element(By.CSS_SELECTOR, 'div.rank01 a')
            artist_tags = song_tag.find_elements(By.CSS_SELECTOR, 'div.rank02 a')
            song_ids.append(song_id)
            song_titles.append(title_tag.text)
            song_artists.append(', '.join([artist.text for artist in artist_tags]))

    driver.quit()

    # 곡 가사 및 좋아요 수 추출 함수
    def get_song_details(song_id):
        local_driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
        try:
            song_url = f'https://www.melon.com/song/detail.htm?songId={song_id}'
            local_driver.get(song_url)
            time.sleep(1)  # 페이지 로드 대기

            # 가사 추출
            lyrics_tag = local_driver.find_element(By.CSS_SELECTOR, 'div.lyric')
            lyrics = lyrics_tag.text.replace(',', '') if lyrics_tag else "No lyrics found"

            # 좋아요 수 추출
            like_button = local_driver.find_element(By.CSS_SELECTOR, 'button.like')
            like_tag = like_button.find_element(By.CSS_SELECTOR, 'span.cnt')
            likes = like_tag.text.replace('총건수', '').strip().replace(',', '') if like_tag else '0'

            return song_id, lyrics, likes
        except Exception as e:
            print(f"Error fetching details for song ID {song_id}: {e}")
            return song_id, "No lyrics found", "0"
        finally:
            local_driver.quit()

    # 병렬처리를 위해 ThreadPoolExecutor 사용
    with ThreadPoolExecutor(max_workers=10) as executor:  # 병렬 처리를 위한 스레드풀 생성, max_workers는 병렬화할 작업 수
        results = list(executor.map(get_song_details, song_ids))

    # 결과 처리
    lyrics_dict = {song_id: lyrics for song_id, lyrics, _ in results}
    likes_dict = {song_id: likes for song_id, _, likes in results}
    lyrics_list = [lyrics_dict[song_id] for song_id in song_ids]
    likes_list = [likes_dict[song_id] for song_id in song_ids]

    # 데이터프레임 생성
    data = {'Song ID': song_ids, 'Title': song_titles, 'Artist': song_artists, 'Lyrics': lyrics_list, 'Likes': likes_list}
    df = pd.DataFrame(data)

    # CSV 파일로 저장
    df.to_csv('melon_top_100(add LIKES).csv', index=False, encoding='utf-8-sig')

    print("CSV 파일이 저장되었습니다.")

window = Tk()
window.geometry("1400x900")
window.configure(bg = "#FFFFFF")

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 900,
    width = 1400,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
canvas.create_rectangle(
    740.0,
    40.0,
    1360.0,
    860.0,
    fill="#E2F8F9",
    outline=""
)

canvas.create_rectangle(
    740.0,
    40.0,
    1360.0,
    860.0,
    fill="#E2F8F9",
    outline=""
)

entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    325.5,
    349.5,
    image=entry_image_1
)
entry_1 = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000716",
    highlightthickness=0
)
entry_1.place(
    x=116.0,
    y=326.0,
    width=419.0,
    height=45.0
)

image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    355.0,
    469.0,
    image=image_image_1
)

entry_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))
entry_bg_2 = canvas.create_image(
    325.5,
    469.5,
    image=entry_image_2
)
entry_2 = Entry(
    bd=0,
    bg="#FFFFFF",
    fg="#000716",
    highlightthickness=0
)
entry_2.place(
    x=116.0,
    y=445.0,
    width=419.0,
    height=47.0
)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    355.0,
    348.0,
    image=image_image_2
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=fetch_melon_top_100,
    relief="flat"
)
button_1.place(
    x=85.0,
    y=628.0,
    width=541.0,
    height=88.0
)

canvas.create_text(
    183.0,
    155.0,
    anchor="nw",
    text="Searching Tab",
    fill="#000000",
    font=("Inter Bold", 30 * -1)
)

canvas.create_text(
    941.0,
    409.0,
    anchor="nw",
    text="클라우드 자리",
    fill="#000000",
    font=("Inter Bold", 30 * -1)
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    364.0,
    62.0,
    image=image_image_3
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_2 clicked"),
    relief="flat"
)
button_2.place(
    x=43.0,
    y=48.0,
    width=140.0,
    height=29.0
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_3 clicked"),
    relief="flat"
)
button_3.place(
    x=172.0,
    y=48.0,
    width=140.0,
    height=29.0
)

button_image_4 = PhotoImage(
    file=relative_to_assets("button_4.png"))
button_4 = Button(
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_4 clicked"),
    relief="flat"
)
button_4.place(
    x=332.0,
    y=48.0,
    width=140.0,
    height=29.0
)

button_image_5 = PhotoImage(
    file=relative_to_assets("button_5.png"))
button_5 = Button(
    image=button_image_5,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_5 clicked"),
    relief="flat"
)
button_5.place(
    x=514.0,
    y=48.0,
    width=161.0,
    height=29.0
)
window.resizable(False, False)
window.mainloop()
